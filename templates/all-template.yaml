apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: github-template
  title: Github Template
  description: Testing template for creating repositories using Github Templates
spec:
  owner: hurameco
  type: service

  parameters:
    - title: Select Github Template
      properties:
        ownTemplate:
          title: Use my template
          type: boolean
          default: true
          description: Toggle to signal if the template is ours our from others
      dependencies:
        ownTemplate:
          allOf:
            - if:
                properties:
                  ownTemplate:
                    const: true
                required: [ownTemplate]
              then:  
                properties:
                  templateName:
                    title: Template Name
                    type: string
                    description: Template Name
                    ui:field: GithubTemplate
                required: 
                  - templateName
            - if:
                properties:
                  ownTemplate:
                    const: false
                required: [ownTemplate]
              then:
                properties:
                  otherUserName:
                    title: Username
                    type: string
                    description: Username of the template owner
                  otherUserTemplateName:
                    title: Template Name
                    type: string
                    description: Template Name
                required:
                  - otherUserName
                  - otherUserTemplateName
    - title: Configure New Repository
      properties:
        repoName:
          title: Repository Name
          type: string
          description: Name of the Repository after template usage
        repoDescription:
          title: Repository Description
          type: string
          description: Text for the description  of the Repository
        repoIsPrivate:
          title: Repository is Private
          type: boolean
          default: false
          description: toggle saying if the new repository is private
      required: 
        - repoName 
        - repoDescription 
        - repoIsPrivate
                   
  steps:
    - id: Instantiate
      name: Instantiate
      action: hurameco:create-using-template
      input:
        ownerName: ${{ "hurameco" if parameters.ownTemplate === true else parameters.otherUserName }}
        templateName: ${{ parameters.templateName if parameters.ownTemplate === true else parameters.otherUserTemplateName }}
        repoName: ${{ parameters.repoName }}
        repoDescription: ${{ parameters.repoDescription}}
        repoIsPrivate: ${{parameters.repoIsPrivate}}

---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: terraform-template
  title: Terraform Template
  description: Testing Template for Terraform Files
spec:
  owner: hurameco
  type: service
  parameters:
    - title: Select main Terraform file
      properties:
        repository:
          title: Repository
          type: string
          ui:field: GithubRepository
      required:
        - repository
    - title: Select Branch
      properties:
        branch:
          title: Repository Branch
          type: string
          ui:field: GithubRepositoryBranches
    - title: Select Terraform File
      properties:
        terraformFile:
          title: Terraform file
          type: string
          ui:field: GithubRepositoryFile

  steps:
    - id: Instantiate
      name: Instantiate
      action: hurameco:create-using-template

---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: create-ec2-instance
  title: Create an EC2 Instance
  description: Create an Instance to deploy your application
  tags: ['recommended']
spec:
  owner: guests
  type: service
  parameters:
    - title: EC2 Instance Creation
      required:
         - InstanceName
         - Region
         - InstanceType    
      properties:
        InstanceName:
          title: Instance Name.
          type: string
          description: Name of the Instnace to be created.
          ui:autofocus: true
          ui:options:
            rows: 5

        Region:
          title:  AWS Region
          type: string
          description: Name of the region where you want to create your create-ec2-instance eg:- us-east-1, ap-south-1 etc.

        InstanceType:
          title: Type of Instance.
          type: string
          description: Type of the instance that you want to deploy, for eg:- t2.medium, t3.medium etc.
          enum:
            - t2.medium
            - t2.small
            - t2.micro
            - t3.medium
        action:
          title: action
          type: string
          description: What action do you want to perform? Create or delete?
          enum:
            - apply
            - destroy

    - title: Choose a Repository Location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Location of the repository
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
# Getting the all the files/details from the template
    - id: fetch-base
      name: Fetching Details from content folder
      action: fetch:template
      input:
        url: ./content  # Location of the content directory where catlog-info.yaml file is present for the template
        values:
          name: ${{ parameters.InstanceName}}

# Publish the content of the current working directory to our github directory
    - id: publish
      name: Publishing Details
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This repo is to create an ec2 instance ${{ parameters.InstanceName }} using backstage.
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: public # or 'internal' or 'private'
        # defaultBranch: master

# Triggering CI-CD to create resource in our case github action. 
    - id: github-action
      name: Starting GitHub action
      action: github:actions:dispatch
      input:
        workflowId:  instance.yml # ID of GitHub action WorkFlow
        repoUrl: 'github.com?repo=aws-ec2&owner=sagar0419'
        branchOrTagName: 'master'
        workflowInputs:
          instanceName: ${{ parameters.InstanceName }}
          awsRegion: ${{ parameters.Region }}
          instanceType: ${{ parameters.InstanceType }}
          action: ${{ parameters.action }}

# Registering new component in the catalog of backstage.
    - id: register
      name: Registering the new Component 
      action: catalog:register
      input:
        repoContentsUrl: ${{steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/component-info.yaml' # where the info of the catalog is stored.

# Output links  are displayed to the user after the template execution.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}

        
